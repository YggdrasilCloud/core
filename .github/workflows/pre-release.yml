name: Pre-release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (execute all steps except tag creation)'
        required: false
        type: boolean
        default: false
      include_prereleases:
        description: 'Include pre-releases when resolving frontend version'
        required: false
        type: boolean
        default: false

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout core
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, json, pcntl, posix
          coverage: xdebug
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run all quality checks
        run: composer ci

  resolve-frontend-version:
    runs-on: ubuntu-latest
    outputs:
      frontend_version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Get latest frontend tag
        id: get-version
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          if [ "${{ inputs.include_prereleases }}" == "true" ]; then
            # Include all tags
            LATEST=$(gh api repos/YggdrasilCloud/frontend/releases/latest --jq '.tag_name')
          else
            # Filter out pre-releases (tags containing '-')
            LATEST=$(gh api repos/YggdrasilCloud/frontend/releases \
              --jq '[.[] | select(.prerelease == false) | .tag_name] | first')
          fi

          if [ -z "$LATEST" ]; then
            echo "No suitable frontend release found"
            exit 1
          fi

          echo "Frontend version resolved: $LATEST"
          echo "version=$LATEST" >> $GITHUB_OUTPUT

  trigger-e2e:
    needs: [quality-checks, resolve-frontend-version]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger E2E tests
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GH_PAT }}
          repository: YggdrasilCloud/tests-e2e
          event-type: test-core-release
          client-payload: |
            {
              "core_ref": "main",
              "core_sha": "${{ github.sha }}",
              "frontend_ref": "${{ needs.resolve-frontend-version.outputs.frontend_version }}",
              "triggered_by": "core",
              "target_version": "${{ inputs.version }}",
              "dry_run": ${{ inputs.dry_run }},
              "workflow_run_id": "${{ github.run_id }}"
            }

      - name: Wait for E2E tests to complete
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "Waiting for E2E workflow to start..."
          sleep 10

          # Get the latest E2E workflow run triggered by repository_dispatch
          MAX_WAIT=600  # 10 minutes max
          ELAPSED=0
          INTERVAL=10

          while [ $ELAPSED -lt $MAX_WAIT ]; do
            # Get latest workflow run for E2E Tests
            RUN_ID=$(gh api repos/YggdrasilCloud/tests-e2e/actions/workflows/e2e-tests.yml/runs \
              --jq '.workflow_runs[0].id // empty' 2>/dev/null || echo "")

            if [ -n "$RUN_ID" ]; then
              echo "Found E2E workflow run: $RUN_ID"

              # Wait for it to complete
              gh run watch $RUN_ID --repo YggdrasilCloud/tests-e2e --exit-status

              echo "E2E tests completed successfully!"
              exit 0
            fi

            echo "Waiting for E2E workflow to start... ($ELAPSED/$MAX_WAIT seconds)"
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          echo "Timeout waiting for E2E workflow to start"
          exit 1

  create-release:
    needs: [trigger-e2e, resolve-frontend-version]
    runs-on: ubuntu-latest
    if: ${{ !inputs.dry_run }}
    permissions:
      contents: write
    steps:
      - name: Checkout core
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag
        run: |
          git tag ${{ inputs.version }}
          git push origin ${{ inputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_PAT }}
          tag_name: ${{ inputs.version }}
          generate_release_notes: true
          body: |
            ## Release ${{ inputs.version }}

            **Tested with:**
            - Core: `main` (${{ github.sha }})
            - Frontend: `${{ needs.resolve-frontend-version.outputs.frontend_version }}`

            Full E2E test report: [Workflow run](https://github.com/YggdrasilCloud/tests-e2e/actions)

  post-tag-verification:
    needs: [create-release, resolve-frontend-version]
    runs-on: ubuntu-latest
    if: ${{ !inputs.dry_run }}
    steps:
      - name: Trigger final E2E verification
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GH_PAT }}
          repository: YggdrasilCloud/tests-e2e
          event-type: verify-release
          client-payload: |
            {
              "core_ref": "${{ inputs.version }}",
              "frontend_ref": "${{ needs.resolve-frontend-version.outputs.frontend_version }}",
              "triggered_by": "core",
              "verification_type": "post-tag"
            }
